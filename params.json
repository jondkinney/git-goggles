{"name":"GIT-Goggles","body":"# git-goggles Readme\r\n\r\ngit-goggles is a git management utilities that allows you to manage your source code as\r\nit evolves through its development lifecycle.\r\n\r\n## Overview\r\n\r\nThis project accomplishes two things:\r\n\r\n* Manage the code review state of your branches\r\n* Gives a snapshot of the where your local branches are vs origin in terms of being ahead / behind on commits\r\n\r\nThere is a nice blog post describing the features along with screenshots at http://bit.ly/git-goggles\r\n\r\n## Field Reference\r\n\r\nIn the table outputted by git-goggles, each row corresponds to a branch, with the following fields:\r\n\r\n* Status: the current status of your branch\r\n    * new: this is a branch that has never been through the review process\r\n    * review: this branch has code that needs to be reviewed\r\n    * merge: everything has been reviewed, but needs to be merged into parent (same as done for being ahead)\r\n    * done: reviewed and merged (doens't matter if you're behind but you can't be ahead)\r\n* Branch: the branch name\r\n* Review: how many commits have taken place since the last review\r\n* Ahead: how many commits are in your local branch that are not in origin\r\n* Behind: how many commits are in origin that are not in your local branch\r\n* Pull & Push: whether your branches need to be pushed or pulled to track origin\r\n    * green checkbox: you don't need to pull\r\n    * red cross: you need to pull\r\n    * question mark: you either don't have a checked out copy of this branch or you need to prune your local tree\r\n* Modified: the last time that HEAD was modified (NOT the last time the review happened)\r\n\r\n## Installation\r\n\r\nTo install from PyPi you should run one of the following commands. (If you use pip for your package installation, you should take a look!)\r\n\r\n```shell\r\npip install git-goggles\r\n```\r\n\r\nor\r\n\r\n```shell\r\neasy_install git-goggles\r\n```\r\n\r\nCheckout the project from github http://github.com/nowells/git-goggles\r\n\r\n```shell\r\ngit clone git://github.com/nowells/git-goggles.git\r\n```\r\n\r\nRun setup.py as root\r\n\r\n```shell\r\ncd git-goggles\r\nsudo python setup.py install\r\n```\r\n\r\n### Documentation\r\n\r\nWith Sphinx <http://sphinx.pocoo.org/> docs deployment: in the docs/ directory, type:\r\n\r\n```shell\r\nmake html\r\n```\r\n\r\nThen open `docs/_build/index.html`\r\n\r\n## Usage\r\n\r\nViewing the status of your branches:\r\n\r\n```shell\r\ngit goggles\r\n```\r\n\r\nStarting your review process (shows an origin diff):\r\n\r\n```shell\r\ngit goggles codereview\r\n```\r\n\r\nComplete your review process (automatically pushes up):\r\n\r\n```shell\r\ngit goggles codereview complete\r\n```\r\n\r\nh2. Configuration\r\n\r\nYou can set a few configuration variables to alter to way git-goggles works out of the box.\r\n\r\nDisable automatic fetching from all remote servers.\r\n\r\n```shell\r\ngit config --global gitgoggles.fetch false\r\n```\r\n\r\nDisable colorized output\r\n\r\n```shell\r\ngit config --global gitgoggles.colors false\r\n```\r\n\r\nAlter the symbols used to display success, failure, unknown states\r\n\r\n```shell\r\ngit config --global gitgoggles.icons.success \"OK\"\r\ngit config --global gitgoggles.icons.failure \"FAIL\"\r\ngit config --global gitgoggles.icons.unknown \"N/A\"\r\n```\r\n\r\nAlter the colors of branch states. The available colors are [grey, red, green, yellow, blue, magenta, cyan, white]\r\n\r\n```shell\r\ngit config --global gitgoggles.colors.local cyan\r\ngit config --global gitgoggles.colors.new red\r\ngit config --global gitgoggles.colors.review red\r\ngit config --global gitgoggles.colors.merge yellow\r\ngit config --global gitgoggles.colors.done green\r\n```\r\n\r\nAlter the width of branch column to turn on word-wrap.\r\n\r\n```shell\r\ngit config --global gitgoggles.table.branch-width 15\r\n```\r\n\r\nAlter the table cell padding (defaults to 0)\r\n\r\n```shell\r\ngit config --global gitgoggles.table.left-padding 1\r\ngit config --global gitgoggles.table.right-padding 1\r\n```\r\n\r\nAlter the display of horizontal rule between rows of table (default false)\r\n\r\n```shell\r\ngit config --global gitgoggles.table.horizontal-rule true\r\n```\r\n\r\n## Internals\r\n\r\ngit-goggles works by creating and managing special tags called\r\n'codereview-<branch_name>' and tracking them against HEAD.\r\n\r\nThe first time a codereview is completed, the tag is created. Subsequent\r\nreviews delete and re-create the tag so that it awlays accurately tracks HEAD.","tagline":"A series of GIT utilities to streamline working with remote branches and reviewing code. git-goggles can be thought of as \"git branch -a\" on steroids. You can install with \"[pip install | easy_install] git-goggles\" and then run \"git goggles\".","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}